import os
from pytube import YouTube
from lxml import etree
from pathlib import Path
import ffmpeg
#from openai import OpenAI
from secret_key import api_key_openai, api_key_edenai
import json
import requests
import warnings
warnings.filterwarnings('ignore')

# # Configuration (for trascription)
# client = OpenAI(api_key=api_key_openai)


def speech_to_text(audio_filepath):
    # OpenAI version
    # transcription = client.audio.transcriptions.create(
    #     model="whisper-1",
    #     file=open(audio_filepath, "rb")
    # )
    # return transcription.text

    # EdenAI version (still openai provider)
    headers = {"Authorization": api_key_edenai}
    url = "https://api.edenai.run/v2/audio/speech_to_text_async"
    data = {
        "providers": "openai",
        "language": "en-US",
    }
    files = {'file': open(audio_filepath, 'rb')}
    response = requests.post(url, data=data, files=files, headers=headers)
    result = json.loads(response.text)['results']['openai']['text']
    return result




# SubFunctions
def get_post_txt(link, audio_dir_path:str='yt_audio/'): # Get subtitles or generate from video's audio
    yt = YouTube(link)
    yt.bypass_age_gate()

    try:
        captions = yt.captions['en'] # WARNING: add check of auto-generated by yt.captions['a.en']
        xml_captions = captions.xml_captions

        # Fn for extracting subtitles
        def format_time(milliseconds):
            seconds, milliseconds = divmod(milliseconds, 1000)
            minutes, seconds = divmod(seconds, 60)
            hours, minutes = divmod(minutes, 60)
            return f"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}"

        # Parse the XML
        root = etree.fromstring(xml_captions.encode('utf-8'))
        srt_captions = []
        for i, child in enumerate(root.findall('.//body/p')):
            start = child.attrib.get('t', '0')
            duration = child.attrib.get('d', '0')
            text = ''.join(child.itertext()).strip().replace('\n', ' ')

            start = int(start)
            duration = int(duration)
            end = start + duration

            start = format_time(start)
            end = format_time(end)

            srt_captions.append(f"{i + 1}\n{start} --> {end}\n{text}\n")
        text_blocks = []
        for srt_block in srt_captions:
            text_block = srt_block.strip().split('\n')[-1]
            text_blocks.append(text_block)

        trascription = ', '.join(text_blocks) # WARNING: maybe change to dots or smth
    except:
        # Function to get the audio stream URL
        def get_audio_stream_url(youtube_url):
            youtube = YouTube(youtube_url)
            audio_stream = youtube.streams.filter(only_audio=True).first()
            return audio_stream.url

        # Function to stream and save the audio using ffmpeg
        def stream_audio(youtube_url, audio_filepath):
            audio_url = get_audio_stream_url(youtube_url)
            stream = ffmpeg.input(audio_url)
            stream = ffmpeg.output(stream, str(audio_filepath), format='mp3')
            ffmpeg.run(stream)

        # Define paths
        audio_dir = Path(audio_dir_path)
        audio_dir.mkdir(parents=True, exist_ok=True)
        audio_filepath = audio_dir / f'{len(os.listdir(audio_dir))}.mp3'

        # Save audio file
        stream_audio(link, str(audio_filepath))
        trascription = speech_to_text(audio_filepath)

    # Summarize trascription
    return trascription



def get_post_img():
    pass


# MainFunction
def VideoToPost(link, output_path='posts/'):
    post_txt = get_post_txt(link)
    print(post_txt)
    pass

link = 'https://youtu.be/jNQXAC9IVRw?si=gjx36t0J7pZtvDyd' # with subtitles
#link = 'https://youtu.be/GC80Dk7eg_A?si=n9pIQh0f_A-zVbA_' # without subtitles

VideoToPost(link)

